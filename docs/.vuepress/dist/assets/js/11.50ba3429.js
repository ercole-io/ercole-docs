(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{203:function(e,t,o){"use strict";o.r(t);var r=o(0),i=Object(r.a)({},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"ercole"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ercole","aria-hidden":"true"}},[e._v("#")]),e._v(" Ercole")]),e._v(" "),o("p",[e._v("Ercole is the backend component of ercole.io project.")]),e._v(" "),o("h2",{attrs:{id:"requirements"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#requirements","aria-hidden":"true"}},[e._v("#")]),e._v(" Requirements")]),e._v(" "),o("table",[o("thead",[o("tr",[o("th",{staticStyle:{"text-align":"center"}},[e._v("Component")]),e._v(" "),o("th",[e._v("Prerequisite")])])]),e._v(" "),o("tbody",[o("tr",[o("td",{staticStyle:{"text-align":"center"}},[e._v("Operating system")]),e._v(" "),o("td",[e._v("CentOS, RedHat, OracleLinux 7/8")])]),e._v(" "),o("tr",[o("td",{staticStyle:{"text-align":"center"}},[e._v("RAM")]),e._v(" "),o("td",[e._v("4GB")])]),e._v(" "),o("tr",[o("td",{staticStyle:{"text-align":"center"}},[e._v("Filesystem")]),e._v(" "),o("td",[e._v("50GB (minimum)")])]),e._v(" "),o("tr",[o("td",{staticStyle:{"text-align":"center"}},[e._v("CPU")]),e._v(" "),o("td",[e._v("2 VirtualCPU")])]),e._v(" "),o("tr",[o("td",{staticStyle:{"text-align":"center"}},[e._v("Database")]),e._v(" "),o("td",[e._v("MongoDB >= 4.2.0")])])])]),e._v(" "),o("h3",{attrs:{id:"minimal-default-required-network-firewall-rules"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#minimal-default-required-network-firewall-rules","aria-hidden":"true"}},[e._v("#")]),e._v(" Minimal default required network/firewall rules")]),e._v(" "),o("table",[o("thead",[o("tr",[o("th",{staticStyle:{"text-align":"center"}},[e._v("From")]),e._v(" "),o("th",[e._v("To")]),e._v(" "),o("th",[e._v("Port")]),e._v(" "),o("th",[e._v("Proto")])])]),e._v(" "),o("tbody",[o("tr",[o("td",{staticStyle:{"text-align":"center"}},[e._v("agents")]),e._v(" "),o("td",[e._v("ercole-dataservice")]),e._v(" "),o("td",[e._v("11111")]),e._v(" "),o("td",[e._v("HTTP[1]")])]),e._v(" "),o("tr",[o("td",{staticStyle:{"text-align":"center"}},[e._v("users")]),e._v(" "),o("td",[e._v("ercole-apiservice")]),e._v(" "),o("td",[e._v("11113")]),e._v(" "),o("td",[e._v("HTTP[1]")])]),e._v(" "),o("tr",[o("td",{staticStyle:{"text-align":"center"}},[e._v("users")]),e._v(" "),o("td",[e._v("ercole-chartservice")]),e._v(" "),o("td",[e._v("11116")]),e._v(" "),o("td",[e._v("HTTP[1]")])]),e._v(" "),o("tr",[o("td",{staticStyle:{"text-align":"center"}},[e._v("users")]),e._v(" "),o("td",[e._v("ercole-reposervice")]),e._v(" "),o("td",[e._v("11114")]),e._v(" "),o("td",[e._v("HTTP[1]")])]),e._v(" "),o("tr",[o("td",{staticStyle:{"text-align":"center"}},[e._v("agents")]),e._v(" "),o("td",[e._v("ercole-reposervice")]),e._v(" "),o("td",[e._v("11114")]),e._v(" "),o("td",[e._v("HTTP[1]")])])])]),e._v(" "),o("p",[e._v("[1] It is highly recommended to setup a reverse proxy between users/agents and ercole for avoiding to comunicate directly to the microservices using HTTP and opening too much ports, using for example nginx. See the instructions below.")]),e._v(" "),o("h4",{attrs:{id:"suggested-network-firewall-rules"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#suggested-network-firewall-rules","aria-hidden":"true"}},[e._v("#")]),e._v(" Suggested network/firewall rules")]),e._v(" "),o("table",[o("thead",[o("tr",[o("th",{staticStyle:{"text-align":"center"}},[e._v("From")]),e._v(" "),o("th",[e._v("To")]),e._v(" "),o("th",[e._v("Port")]),e._v(" "),o("th",[e._v("Proto")])])]),e._v(" "),o("tbody",[o("tr",[o("td",{staticStyle:{"text-align":"center"}},[e._v("ercole-reposervice")]),e._v(" "),o("td",[e._v("*.github.com")]),e._v(" "),o("td",[e._v("443")]),e._v(" "),o("td",[e._v("HTTPS[1]")])]),e._v(" "),o("tr",[o("td",{staticStyle:{"text-align":"center"}},[e._v("ercole-reposervice")]),e._v(" "),o("td",[e._v("repository.ercole.io")]),e._v(" "),o("td",[e._v("443")]),e._v(" "),o("td",[e._v("HTTPS[1]")])])])]),e._v(" "),o("p",[e._v("[1] You can safely separate ercole-reposervice from the others microservices.")]),e._v(" "),o("h2",{attrs:{id:"installation-guide"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#installation-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Installation guide")]),e._v(" "),o("p",[e._v("This installation guide is for RHEL8, but the steps can be easily adapted for RHEL7 .")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("curl https://repository.ercole.io/shared/ercole-rhel8-x86_64.repo | tee /etc/yum.repos.d/ercole-x86_64.repo")])]),e._v(" "),o("li",[o("code",[e._v("yum install ercole")])]),e._v(" "),o("li",[e._v("If your machine has multiple IP addresses, check and fix endpoints in "),o("code",[e._v("/etc/ercole/conf.d/20-ercolesetup.toml")])]),e._v(" "),o("li",[e._v("Review ercole configuration with "),o("code",[e._v("ercole show-config")])]),e._v(" "),o("li",[o("code",[e._v("systemctl start ercole")])])]),e._v(" "),o("p",[e._v("Ercole is configured automatically during the installation but you can edit the configuration by creating/files in "),o("code",[e._v("/etc/ercole/conf.d")]),e._v(". Its logs can be read with the command "),o("code",[e._v("journalctl -u ercole-dataservice -u ercole-alertservice -u ercole-apiservice -u ercole-reposervice -u ercole-chartservice")]),e._v(" and can be updated as usually with a simple "),o("code",[e._v("yum update")]),e._v(" unless in the new versions were introduced breaking changes.\nIt is also recommeded to also install "),o("a",{attrs:{href:"https://stedolan.github.io/jq/download/",target:"_blank",rel:"noopener noreferrer"}},[e._v("jq"),o("OutboundLink")],1),e._v(".\nAfter the installation you may want to "),o("a",{attrs:{href:"#installation-guide-2"}},[e._v("install ercole-web and configure nginx")]),e._v(" or to "),o("a",{attrs:{href:"#various-howto-examples"}},[e._v("install artifacts")]),e._v(".")]),e._v(" "),o("h2",{attrs:{id:"ercole-configuration"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ercole-configuration","aria-hidden":"true"}},[e._v("#")]),e._v(" Ercole configuration")]),e._v(" "),o("p",[e._v("The configuration is written in "),o("a",{attrs:{href:"https://github.com/toml-lang/toml",target:"_blank",rel:"noopener noreferrer"}},[e._v("TOML"),o("OutboundLink")],1),e._v(" syntax and it is stored in these files/directory in ascending order of priority. The properties specified in low priority configuration files are overriden by the values in high priority configuration files. The configurations files are:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("/opt/ercole/config.toml")]),e._v(" (legacy config file)")]),e._v(" "),o("li",[o("code",[e._v("/usr/share/ercole/config.toml")]),e._v(" (distributor config file)")]),e._v(" "),o("li",[o("code",[e._v("/etc/ercole/ercole.toml")])]),e._v(" "),o("li",[o("code",[e._v("/etc/ercole/conf.d/*.toml")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("/etc/ercole/conf.d/20-ercolesetup.toml")]),e._v(" is a file created by "),o("code",[e._v("ercole-setup")]),e._v(" utility that contains known host specific configuration like remote endpoints, paths to certificates/keys and inter microservice configuration params.")])])]),e._v(" "),o("li",[o("code",[e._v("~/.config/ercole.toml")])]),e._v(" "),o("li",[o("code",[e._v("./config.toml")])]),e._v(" "),o("li",[e._v("An optional file specified to the "),o("code",[e._v("ercole")]),e._v(" using the "),o("code",[e._v("-c")]),e._v(" option.")])]),e._v(" "),o("p",[e._v("It's highly recommended to configure it by creating files in "),o("code",[e._v("/etc/ercole/conf.d")]),e._v(" (e.g "),o("code",[e._v("/etc/ercole/conf.d/50-myconf.toml")]),e._v("). If you change the "),o("code",[e._v("RemoteEndpoint")]),e._v("s of the microservices you may need to re-run "),o("code",[e._v("ercole-setup")]),e._v("(or "),o("code",[e._v("ercoleweb-setup")]),e._v(" if you have installed ercole-web).")]),e._v(" "),o("h3",{attrs:{id:"configuration-properties-list"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#configuration-properties-list","aria-hidden":"true"}},[e._v("#")]),e._v(" Configuration properties list")]),e._v(" "),o("h4",{attrs:{id:"mongodb"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#mongodb","aria-hidden":"true"}},[e._v("#")]),e._v(" Mongodb.*")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("Mongodb.URI")]),e._v(" is the "),o("a",{attrs:{href:"https://docs.mongodb.com/manual/reference/connection-string/",target:"_blank",rel:"noopener noreferrer"}},[e._v("uri"),o("OutboundLink")],1),e._v(" used to connect to the mongodb database. The default value is "),o("code",[e._v("mongodb://localhost:27017/ercole")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("Mongodb.DBName")]),e._v(" is the name of the mongodb database. The default value is "),o("code",[e._v("ercole")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("Mongodb.Migrate")]),e._v(" contains true if ercole should update/migrate the database schema, otherwise false. The default value is "),o("code",[e._v("true")]),e._v(". When ercole is started, it try to update the structure of the database by updating the schemas, updating the documents, creating the indexes, inserting default values.")])]),e._v(" "),o("h4",{attrs:{id:"dataservice"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#dataservice","aria-hidden":"true"}},[e._v("#")]),e._v(" DataService.*")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("DataService.RemoteEndpoint")]),e._v(" contains the URI used by clients to connect to the dataservice.")]),e._v(" "),o("li",[o("code",[e._v("DataService.BindIP")]),e._v(" contains the IP Address on which data service listen.")]),e._v(" "),o("li",[o("code",[e._v("DataService.Port")]),e._v(" contains the port on which data service listen.")]),e._v(" "),o("li",[o("code",[e._v("DataService.LogHTTPRequest")]),e._v(" enable the logging of the http request.")]),e._v(" "),o("li",[o("code",[e._v("DataService.LogInsertingHostdata")]),e._v(" enable the logging of the inserting hostdata.")]),e._v(" "),o("li",[o("code",[e._v("DataService.LogDataPatching")]),e._v(" enable the logging of data patching events.")]),e._v(" "),o("li",[o("code",[e._v("DataService.EnablePatching")]),e._v(" enable the patching of hostdata. It's required for tagging the hosts and modifying Oracle Database license count values.")]),e._v(" "),o("li",[o("code",[e._v("DataService.AgentUsername")]),e._v(" contains the username used to authenticate agents")]),e._v(" "),o("li",[o("code",[e._v("DataService.AgentPassword")]),e._v(" contains the password used to authenticate agents")]),e._v(" "),o("li",[o("code",[e._v("DataService.CurrentHostCleaningJob.Crontab")]),e._v(" contains the "),o("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cron",target:"_blank",rel:"noopener noreferrer"}},[e._v("cron"),o("OutboundLink")],1),e._v(" schedule expression for automatic archivial of the current (non archived).")]),e._v(" "),o("li",[o("code",[e._v("DataService.CurrentHostCleaningJob.HourThreshold")]),e._v(" contains the maximium number of hours in which a hostdata is considered up to date. After this threshold the host will be archived by the CurrentHostCleaningJob.")]),e._v(" "),o("li",[o("code",[e._v("DataService.CurrentHostCleaningJob.RunAtStartup")]),e._v(" enable the running of the current host cleaning job at startup.")]),e._v(" "),o("li",[o("code",[e._v("DataService.ArchivedHostCleaningJob.Crontab")]),e._v(" contains the "),o("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cron",target:"_blank",rel:"noopener noreferrer"}},[e._v("cron"),o("OutboundLink")],1),e._v(" schedule expression for automatic deletion of archived hosts.")]),e._v(" "),o("li",[o("code",[e._v("DataService.ArchivedHostCleaningJob.HourThreshold")]),e._v(" contains the maximium number of hours in which a archived hostdata is retained. After this threshold the archived host will be deleted by the ArchivedHostCleaningJob.")]),e._v(" "),o("li",[o("code",[e._v("DataService.ArchivedHostCleaningJob.RunAtStartup")]),e._v(" enable the running of the archived host cleaning job at startup.")]),e._v(" "),o("li",[o("code",[e._v("DataService.FreshnessCheckJob.Crontab")]),e._v(" contains the "),o("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cron",target:"_blank",rel:"noopener noreferrer"}},[e._v("cron"),o("OutboundLink")],1),e._v(" schedule expression for automatic throws of NO_DATA alerts when a current host is not up to date.")]),e._v(" "),o("li",[o("code",[e._v("DataService.FreshnessCheckJob.HourThreshold")]),e._v(" contains the maximium number of hours in which a hostdata is considered up to date. After this threshold a NO_DATA alert is thrown by the FreshnessCheckJob.")]),e._v(" "),o("li",[o("code",[e._v("DataService.FreshnessCheckJob.RunAtStartup")]),e._v(" enable the running of the freshness check job at startup.")])]),e._v(" "),o("h4",{attrs:{id:"alertservice"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#alertservice","aria-hidden":"true"}},[e._v("#")]),e._v(" AlertService.*")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("AlertService.RemoteEndpoint")]),e._v(" contains the URI used by the microservices to connect to the alertservice.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.BindIP")]),e._v(" contains the IP Address on which alert service listen.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.Port")]),e._v(" contains the port on which alert service listen.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.LogHTTPRequest")]),e._v(" enable the logging of the http request.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.LogMessages")]),e._v(" enable the logging of the processing queue messages.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.LogAlertThrows")]),e._v(" enable the logging of throwing alerts.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.PublisherUsername")]),e._v(" contains the username used to authenticate the microservices.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.PublisherPassword")]),e._v(" contains the password used to authenticate the microservices.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.Emailer.Enabled")]),e._v(" enable the notifying of the alerts by email.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.Emailer.From")]),e._v(" the source email address that is used to send emails.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.Emailer.To")]),e._v(" the destination email addresses to which are sent the emails.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.Emailer.SMTPServer")]),e._v(" SMTP server used to send email.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.Emailer.SMTPPort")]),e._v(" port of the SMTP server used to send email.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.Emailer.SMTPUsername")]),e._v(" username used to authenticate to the SMTP server.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.Emailer.SMTPPassword")]),e._v(" password used to authenticate to the SMTP server.")]),e._v(" "),o("li",[o("code",[e._v("AlertService.Emailer.DisableSSLCertificateValidation")]),e._v(" true if disable the authentication of the SMTP server.")])]),e._v(" "),o("h4",{attrs:{id:"apiservice"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#apiservice","aria-hidden":"true"}},[e._v("#")]),e._v(" APIService.*")]),e._v(" "),o("ul",[o("li",[o("p",[o("code",[e._v("APIService.RemoteEndpoint")]),e._v(" contains the URI used by the clients to connect to the apiservice.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("APIService.BindIP")]),e._v(" contains the IP Address on which api service listen.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("APIService.Port")]),e._v(" contains the port on which api service listen.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("APIService.LogHTTPRequest")]),e._v(" enable the logging of the http request.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("APIService.ReadOnly")]),e._v(" disable the APIs that modify the data")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("APIService.EnableInsertingCustomPatchingFunction")]),e._v(" enable the possibility to add/set a custom patching function.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("APIService.DebugOracleDatabaseAgreementsAssignmentAlgorithm")]),e._v(" enable the verbosity of the assignment algorithm used to distribuite oracle database agreement licenses.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("APIService.AuthenticationProvider.Type")]),e._v(" contains the authentication type: the allowed values are "),o("code",[e._v("basic")]),e._v(" or "),o("code",[e._v("ldap")]),e._v(".")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("basic")]),e._v(" authentication provider type needs:\n"),o("ul",[o("li",[o("code",[e._v("APIService.AuthenticationProvider.Username")]),e._v(" contains the username used to authenticate.\nIt's also used as username by "),o("code",[e._v("ercole")]),e._v(" to perform requests to APIService.")]),e._v(" "),o("li",[o("code",[e._v("APIService.AuthenticationProvider.Password")]),e._v(" contains the password used to authenticate password when "),o("code",[e._v("Type")]),e._v(" is "),o("code",[e._v("basic")]),e._v(".\nIt's also used as password by "),o("code",[e._v("ercole")]),e._v(" to perform requests to APIService.")])])]),e._v(" "),o("li",[o("code",[e._v("ldap")]),e._v(" authentication provider type needs:\n"),o("ul",[o("li",[o("code",[e._v("APIService.AuthenticationProvider.Username")]),e._v(" contains the username used by "),o("code",[e._v("ercole")]),e._v(" to perform requests to APIService.")]),e._v(" "),o("li",[o("code",[e._v("APIService.AuthenticationProvider.Password")]),e._v(" contains the password used by "),o("code",[e._v("ercole")]),e._v(" to perform requests to APIService.")]),e._v(" "),o("li",[o("code",[e._v("APIService.AuthenticationProvider.Host")]),e._v(", contains the server used to authenticate the users.")]),e._v(" "),o("li",[o("code",[e._v("APIService.AuthenticationProvider.Port")]),e._v(", contains the port used to connect to the LDAP server. e.g. 389.")]),e._v(" "),o("li",[o("code",[e._v("APIService.AuthenticationProvider.LDAPBase")]),e._v(", contains the LDAP base of the realm. e.g. "),o("code",[e._v("dc=planetexpress,dc=com")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("APIService.AuthenticationProvider.LDAPUseSSL")]),e._v(", enable/disable SSL for connecting to the server.")]),e._v(" "),o("li",[o("code",[e._v("APIService.AuthenticationProvider.LDAPBindDN")]),e._v(", contains the account used to authenticate to the LDAP server.")]),e._v(" "),o("li",[o("code",[e._v("APIService.AuthenticationProvider.LDAPBindPassword")]),e._v(", contains the password account used to authenticate to the LDAP server.")]),e._v(" "),o("li",[o("code",[e._v("APIService.AuthenticationProvider.LDAPUserFilter")]),e._v(", filter to search username matches, must contain "),o("code",[e._v("%s")]),e._v(" that will be replaced with the username.")]),e._v(" "),o("li",[e._v("Here it is a complete example working with a "),o("a",{attrs:{href:"https://github.com/rroemhild/docker-test-openldap",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker OpenLDAP example"),o("OutboundLink")],1),e._v(":")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('[APIService.AuthenticationProvider]\nType = "ldap"\n# User and Password used by other services to login to APIService\nUsername = "hermes" \nPassword = "hermes"\nHost = "127.0.0.1"\nPort = 10389\nLDAPBase = "dc=planetexpress,dc=com"\nLDAPUseSSL = false\nLDAPBindDN = "cn=admin,dc=planetexpress,dc=com"\nLDAPBindPassword = "GoodNewsEveryone"\nLDAPUserFilter = "(uid=%s)"\n')])])])])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("APIService.AuthenticationProvider.PrivateKey")]),e._v(" contains the key used to sign the authentication JWT tokens.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("APIService.AuthenticationProvider.PublicKey")]),e._v(" contains the key used to validate the authentication JWT tokens.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("APIService.AuthenticationProvider.TokenValidityTimeout")]),e._v(" contains the maximum number of seconds on which the token is considered valid.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("APIService.OperatingSystemAggregationRules")]),e._v(" are the rules used to map OS names + Version to product.")])])]),e._v(" "),o("h4",{attrs:{id:"reposervice"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#reposervice","aria-hidden":"true"}},[e._v("#")]),e._v(" RepoService.*")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("RepoService.UpstreamRepositories")]),e._v(" contains the upstream repository from which the artifacts are downloaded.\n"),o("ul",[o("li",[o("code",[e._v("Name")]),e._v(" contains the name of the repository.")]),e._v(" "),o("li",[o("code",[e._v("Type")]),e._v(" contains the type of the repository. The allowed values are "),o("code",[e._v("github-release")]),e._v(", "),o("code",[e._v("directory")]),e._v(", "),o("code",[e._v("ercole-reposervice")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("URL")]),e._v(" contains the URL used to find the files. In the case of "),o("code",[e._v("github-release")]),e._v(" it should the URL of the API that return the releases list. e.g https://api.github.com/repos/ercole-io/ercole-agent/releases. In the case of "),o("code",[e._v("directory")]),e._v(" it should be the directory in which the artifacts are contained. In the case of "),o("code",[e._v("ercole-reposervice")]),e._v(" it should be the url of a directory that contains the directory "),o("code",[e._v("all")]),e._v(" and the file "),o("code",[e._v("index.json")]),e._v(".")])])]),e._v(" "),o("li",[o("code",[e._v("RepoService.HTTP.Enable")]),e._v(" contains true if reposervice should serve the files via HTTP.")]),e._v(" "),o("li",[o("code",[e._v("RepoService.HTTP.RemoteEndpoint")]),e._v(" contains the url used by clients to reach the repository via HTTP.")]),e._v(" "),o("li",[o("code",[e._v("RepoService.HTTP.BindIP")]),e._v(" contains the IP on which reposervice listen for HTTP requests.")]),e._v(" "),o("li",[o("code",[e._v("RepoService.HTTP.Port")]),e._v(" contains the port on which reposervice listen for HTTP requests.")]),e._v(" "),o("li",[o("code",[e._v("RepoService.HTTP.LogHTTPRequest")]),e._v(" true if reposervice should log for every received HTTP request.")])]),e._v(" "),o("h4",{attrs:{id:"chartservice"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#chartservice","aria-hidden":"true"}},[e._v("#")]),e._v(" ChartService.*")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("ChartService.RemoteEndpoint")]),e._v(" contains the URI used by the clients to connect to the chartservice.")]),e._v(" "),o("li",[o("code",[e._v("ChartService.BindIP")]),e._v(" contains the IP Address on which chart service listen.")]),e._v(" "),o("li",[o("code",[e._v("ChartService.Port")]),e._v(" contains the port on which chart service listen.")]),e._v(" "),o("li",[o("code",[e._v("ChartService.LogHTTPRequest")]),e._v(" enable the logging of the http request.")])]),e._v(" "),o("h2",{attrs:{id:"notes-about-the-internal-repository"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#notes-about-the-internal-repository","aria-hidden":"true"}},[e._v("#")]),e._v(" Notes about the internal repository")]),e._v(" "),o("p",[e._v("Ercole repository is tought to be public and visibile to everyone so it shouldn't contains private informations like the password or private keys. The main ercole repository is "),o("a",{attrs:{href:"https://repository.ercole.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://repository.ercole.io"),o("OutboundLink")],1),e._v(". It is served via HTTP so you can download files in various mode like:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("wget http://myawesomeercole2.local:11114/ping.txt")])]),e._v(" "),o("li",[o("code",[e._v("curl http://myawesomeercole2.local:11114/ping.txt > /tmp/ping.txt")]),e._v("\nSome repository files/directory are managed using the "),o("code",[e._v("ercole repo")]),e._v(" subcommands. Others files/directories can be safely modified.")])]),e._v(" "),o("p",[e._v("Managed files:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("ping.txt")]),e._v(" is a file used to check the liveness of the microservices. It's really managed but it's recommended to not modify it.")]),e._v(" "),o("li",[o("code",[e._v("index.json")]),e._v(" contains the cached list of available artifacts. Can be safely removed for forcing the rebuild of the cache when the next "),o("code",[e._v("repo")]),e._v(" subcommands is run.")]),e._v(" "),o("li",[o("code",[e._v("all/")]),e._v(" contains the symlinks to all installed (and managed) artifacts.")]),e._v(" "),o("li",[o("code",[e._v("rhel/*")]),e._v(" contains the RPM repositories of the packages for every RHEL versions.")]),e._v(" "),o("li",[o("code",[e._v("win/*")]),e._v(" contains various ercole-agent setup files for windows.")]),e._v(" "),o("li",[o("code",[e._v("aix/")]),e._v(" contains the RPM repositories of the packages for every AIX versions.")]),e._v(" "),o("li",[o("code",[e._v("aix-tar-gz/")]),e._v(" alternative artifacts of agents for AIX.")]),e._v(" "),o("li",[o("code",[e._v("hpux/")]),e._v(" contains the agents for HPUX.")])]),e._v(" "),o("p",[e._v("Unmanaged known files:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("shared/")]),e._v(" contains various files like some .repo files.")]),e._v(" "),o("li",[o("code",[e._v("snapshots/")]),e._v(" is a directory present in "),o("a",{attrs:{href:"https://repository.ercole.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://repository.ercole.io"),o("OutboundLink")],1),e._v(" that is used to store snapshots of all projects. The snapshots aren't tought to be used outside the development.")])]),e._v(" "),o("p",[e._v("It may be a good idea to create multiple ercole reposervice for directory for stable/testing/unstable or PRD/COL/TST.")]),e._v(" "),o("h2",{attrs:{id:"ercole-cli-usage"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ercole-cli-usage","aria-hidden":"true"}},[e._v("#")]),e._v(" "),o("code",[e._v("ercole")]),e._v(" CLI usage")]),e._v(" "),o("p",[e._v("Ercole is thought as a CLI program, you can run commands and get help about them with the "),o("code",[e._v("--help")]),e._v(" flag.")]),e._v(" "),o("p",[e._v("Relevant commands are:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("ercole version")]),e._v(" print the version of ercole.")]),e._v(" "),o("li",[o("code",[e._v("ercole show-config")]),e._v(" show the ercole's actual configuration.")]),e._v(" "),o("li",[o("code",[e._v("ercole fire-hostdata")]),e._v(" send a hostdata stored in a json file or from a stdin to ercole-dataservice.")]),e._v(" "),o("li",[o("code",[e._v("ercole migrate")]),e._v(" migrate the structure of the mongodb database from a previous one to the latest.")]),e._v(" "),o("li",[o("code",[e._v("ercole serve")]),e._v(" start all the services. You can select explicity which services starts using "),o("code",[e._v("--enable")]),e._v(" options like "),o("code",[e._v("--enable-dataservice")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("ercole repo")]),e._v(" is a group of subcommands used to manage the repository:\n"),o("ul",[o("li",[o("code",[e._v("list")]),e._v(" lists the artifacts detected in the upstream repositories.")]),e._v(" "),o("li",[o("code",[e._v("info")]),e._v(" get the informations about the specified artifacts.")]),e._v(" "),o("li",[o("code",[e._v("install")]),e._v(" download and install the specified artifacts.")]),e._v(" "),o("li",[o("code",[e._v("remove")]),e._v(" remove the specified artifacts.")]),e._v(" "),o("li",[o("code",[e._v("update")]),e._v(" try to find newer version of all installed artifacts and install them.")])])])]),e._v(" "),o("h3",{attrs:{id:"enable-ercole-autocompletion"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#enable-ercole-autocompletion","aria-hidden":"true"}},[e._v("#")]),e._v(" Enable "),o("code",[e._v("ercole")]),e._v(" autocompletion")]),e._v(" "),o("p",[e._v("To load autocompletion for each session, execute once:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ ercole completion bash > /etc/bash_completion.d/ercole\n")])])]),o("h2",{attrs:{id:"various-howto-examples"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#various-howto-examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Various HOWTO/examples")]),e._v(" "),o("h3",{attrs:{id:"how-to-install-an-artifact"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#how-to-install-an-artifact","aria-hidden":"true"}},[e._v("#")]),e._v(" How to install an artifact")]),e._v(" "),o("ul",[o("li",[e._v("The first thing to do is to find the available artifacts by running the command: "),o("code",[e._v("ercole repo list")])]),e._v(" "),o("li",[e._v("Choose the artifact you want.")]),e._v(" "),o("li",[e._v("Install it with for example with the command: "),o("code",[e._v("ercole repo install ercole-agent/ercole-agent-rhel7@1.5.0")])])]),e._v(" "),o("h3",{attrs:{id:"install-a-package-to-rhelx-from-the-ercole-reposervice"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#install-a-package-to-rhelx-from-the-ercole-reposervice","aria-hidden":"true"}},[e._v("#")]),e._v(" Install a package to rhelX from the ercole-reposervice")]),e._v(" "),o("p",[e._v("The first thing to do is to create a repository file .")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("curl https://repository.ercole.io/shared/ercole-rhel7-x86_64.repo | tee /etc/yum.repos.d/ercole.repo")])])]),e._v(" "),o("p",[e._v("The next thing is to install the package with yum or dnf.")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("yum install ercole-agent")])])])])},[],!1,null,null,null);t.default=i.exports}}]);